---
- name: "Install cifs-utils if OS is at least RH7"
  yum:
    name: cifs-utils
    state: installed

- name: "mount {{FILER}}"
  mount:
    path: "{{mount_point}}"
    fstype: cifs
    src: "{{FILER}}"
    opts: "vers=3.0,username={{ RH7USR }},password={{ RH7PWD }},iocharset=utf8"
    state: mounted

- name: "Create Directory on Filer"
  file:
    path: "{{mount_point}}/{{ RITM }}"
    mode: 777
    state: directory

- name: "Find {{ USER }} SID for ACL rights"
  win_shell: "(New-Object System.Security.Principal.NTAccount('{{USER}}@eu.airbus.corp')).Translate([System.Security.Principal.SecurityIdentifier]).value" 
  register: ID
  vars:
    ansible_become: no
    ansible_user : '{{ lookup("env", "ANSIBLE_NET_USERNAME") }}'
    ansible_password: '{{ lookup("env", "ANSIBLE_NET_PASSWORD") }}'
  delegate_to: fr0-viaas-604.eu.airbus.corp
    
- name: "Add {{ USER }} allow rights on directory"
  shell: "/bin/setcifsacl -a 'ACL:{{ ID.stdout|trim }}:ALLOWED/OI|CI/FULL' {{mount_point}}/{{ RITM }}"

- name: "Find SID for ACL rights for a list of users"
  win_shell: "(New-Object System.Security.Principal.NTAccount('{{item | trim }}@eu.airbus.corp')).Translate([System.Security.Principal.SecurityIdentifier]).value"
  register: LIST_IDS
  with_items: "{{ LIST_USERS }}"
  vars:
    ansible_become: no
    ansible_user : '{{ lookup("env", "ANSIBLE_NET_USERNAME") }}'
    ansible_password: '{{ lookup("env", "ANSIBLE_NET_PASSWORD") }}'
  delegate_to: fr0-viaas-604.eu.airbus.corp
  ignore_errors: yes
  when: LIST_USERS|length|int > 0

- name: "Add rights on directory for a list of users"
  shell: "/bin/setcifsacl -a 'ACL:{{ item.stdout|trim }}:ALLOWED/OI|CI/FULL' {{mount_point}}/{{ RITM }}"
  with_items: "{{ LIST_IDS.results }}"
  loop_control:
    label: ""
  ignore_errors: yes
  register: R_USERS
  when: LIST_USERS|length|int > 0

- name: "warning if all users cannot got rights"
  set_fact:
    MSG_USERS: "WARNING: some USERS haven t right on the share"
  when: LIST_USERS|length|int > 0 and R_USERS.failed is defined and  R_USERS.failed == true

- name: "Copy Log files on Filer"
  copy:
    src: "{{ LOG | trim }}"
    remote_src: yes
    dest: "{{mount_point}}/{{ RITM }}/"
    mode: 666

- name: "Umount Filer {{FILER}}"
  mount:
    path: "{{mount_point}}"
    fstype: cifs
    src: "{{FILER}}"
    state: absent
